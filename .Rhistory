swirl()
head(flags)
play()
class(flags)
nxt()
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
play()
dim(cls_list)
?class
nxt()
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
play()
?table
nxt()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, sum)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
?gl
gl(5,2)
message("ds")
print("ds")
source('~/git_hub/ProgrammingAssignment2/cachematrix.R')
x <- matrix(c(-1, -2, 1, 1), 2, 2)
m < makeCacheMatrix(x)
m <- makeCacheMatrix(x)
m$get()
m$getInv()
cacheSolve(m)
source('~/git_hub/ProgrammingAssignment2/cachematrix.R')
m <- makeCacheMatrix(x)
source('~/git_hub/ProgrammingAssignment2/cachematrix.R')
m <- makeCacheMatrix(x)
m$get()
inv <- cacheSolve(m)
inv
inv <- cacheSolve(m)
inv
n <- 3
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
matSolved1 <- cacheSolve(matCached)
matSolved2 <- cacheSolve(matCached)
if (!identical(matSolved1, matSolved2))
message("Cached version does not match solved version")
n <- 3
mat <- matrix(rnorm(1:(n*n)), nrow=n, ncol=n)
matCached <- makeCacheMatrix(mat)
matSolved1 <- cacheSolve(matCached)
matSolved2 <- cacheSolve(matCached)
if (identical(matSolved1, matSolved2))
message("Cached version does not match solved version")
library(datasets)
data(iris)
?iris
library(datasets)
?iris
data(iris)
class(iris)
tapply(iris$Speal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
colMeans(iris[,1:4])
lapply(iris[, 1:4], mean)
sapply(iris[, 1:4], mean)
data(mtcars)
class(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
m <- tapply(mtcars$hp, mtcars$cyl, mean)
m[3] - m[1]
data(airquality)
class(airquality)
c <- table(airquality, airquality$Month)
c <- table(airquality, airquality$Month, mean)
c <- table(airquality$Wind, airquality$Month)
C
C
c
c
c <- table(airquality$Wind, airquality$Month, mean)
c <- table(airquality$Temp, airquality$Month, mean)
c <- tapply(airquality, airquality$Month)
c <- tapply(airquality$Wind, airquality$Month)
c
c <- tapply(airquality$Wind, airquality$Month, mean)
c
rnorm(10)
rnorm(10)
rnorm(10)
set.seed(1)
set.seed(1)
rnorm(10)
rnorm(10)
set.seed(1)
set.seed(1)
rnorm(10)
rnorm(10)
set.seed(1)
rnorm(10)
rnorm(10)
rnorm(10)
rnorm(10)
rnorm(10)
set.seed(1)
set.seed(1)
rnorm(10)
rnorm(10)
rnorm(10)
rnorm(10)
set.seed(1)
rpois(5, 2)
x <- rep(0:1, each = 5)
x
library(swirl)
swirl()
lsï¼ˆ
ls()
View(plants)
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
play()
c <- table(plants$Active_Growth_Period)
class(c)
c
?table
nxt()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
play()
class(LETTERS)
LETTERS
c <- LETTERS
nxt()
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom()
?rbinom
rbinom(1, 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
play()
?rep
?replicate
nxt()
repliacte(100, rpois(5, 10))
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
q()
?atomic
?numeric
c <- numeric(10)
c
c < numeric(c(1,2,3,4))
c < numeric(3, c(1,2,3))
c <- c(1,2,3)
c <- numeric(c)
c <- as.numeric(c)
c
1L
2L
?list
x <- list(foo = 1:4, bar = 0.6)
str(x)
c <- data.frame(x)
View(c)
library(swirl)
swirl()
swirl()
seq(1,10)
seq(1,10,length = 30)
c <- matrix(1:20, 4, 5)
length(c)
dim(c)
?|
? |
?|
x <- c(TRUE, FALSE)
Y <- c(TRUE, TRUE)
X & Y
X & Y
x & y
x & Y
x && Y
X == y
x == Y
identical(x, Y)
my_char <- c(1, 2,3 ,4)
paste(my_char, seq = " ")
paste(my_char, collapse = " ")
c <- paste(my_char, collapse = " ")
sample(10)
c(foo = 11, bar = 2, norf = 14)
k <- c(11, 2, 14)
names(k) <- c("a", "b", "c")
k
?apply
library(dataset)
library(datasets)
datasets(cars)
data(cars)
c <- data.frame(cars)
View(c)
spply(c, 1, mean)
apply(c, 1, mean)
apply(c, 2, mean)
lapply(c, mean)
k <- apply(c, 2, mean)
kk <- sapply(c, mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
x <- list(foo = 1:4, bar = "liuhauwei")
x
c <- x$bar
c
x[1]
x[2]
x[[1]]
x[[2]]
x[[1]][2]
?list
c <- vector("numerica", 5)
c <- vector("numeric", 5)
c
c <- c(T,T,FF)
c <- c(T,T,F,F)
C
c
c <- 1:20
dim(c) <- c(4, 5)
c
c <- data.matrix(c)
c
class(c)
data.frame(c)
c <- data.frame(c)
class(c)
c <- 1:20
dim(c) <- c(4, 5)
c <- as.data.frame(c)
class(c)
c
c
c <- as.matrix(c)
c <- matrxi(1:4, 2, 2)
c <- matrix(1:4, 2, 2)
dimnames(c) <- list(c("a", "b"), c("c", "d"))
c
c <- factor(c("a", "b"), levels = c("1", "2"))
c
c<- factor(c("a", "b"))
c
table(c)
c <- factor(c("a", "b"), levels = c("1", "2"))
table(c)
c <- factor(c(4,5))
c
c <- factor(c("a", "b"), levels = c("1", "2"))
c
c <- factor(c("a", "b"))
c
q()
?split
library(datasets)
data(cars)
view(cars)
viewdata(cars)
viewData(cars)
cars <- data.frame(cars)
View(cars)
data(mtcars)
cars <- data.frame(mtcars)
View(mtcars)
group <- split(cars, cars$cyl)
str(group)
group <- split(cars$row.names, cars$cyl)
group <- split(cars, list(cars$cyl,cars$gear) )
str(group)
group <- split(cars$hp, cars$cyl )
str(group)
?quantile
t <- tapply(hp, cars$cyl, mean)
t <- tapply(cars$hphp, cars$cyl, mean)
t <- tapply(cars$hp, cars$cyl, mean)
t
t <- tapply(cars$hp, list(cars$cyl, cars$gear), mean)
t
t <- mapply(cars$hp, list(cars$cyl, cars$gear), mean)
t <- aggregate(cars$hp, list(cars$cyl, cars$gear), mean)
t
t <- aggregate(cars$hp, list(cars$gear, cars$cyl), mean)
t
library(swirl)
swirl)
swirl()
bye()
q()
?ggplot2
??ggplot2
library(datasets)
data(cars)
which(cars, plot(speed, dist))
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
?par
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
?transform
class(airquality$Month)
class(airquality)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, data = airquality, xlab = "Month", ylab = "Ozone(ppb)")
?colors
example(colors)
par("lty")
par("pch")
par("mar")
par("mfrow")
?par("mfrow")
?text
?title
?axis
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and wind in NewYork city")
title(xlab = "liuhuaw")
with(airquality, plot(Wind, Ozone), main = "Ozone and wind in NewYork city")
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NewYork city"))
with(subset(airquality, Month = 5), plot(Wind, Zone, col = "blue"))
with(subset(airquality, Month = 5), plot(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NewYork city"))
with(subset(airquality, Month = 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NewYork city"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "OtherMonths"))
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NewYork city"), pch = 20)
with(airquality, plot(Wind, Ozone, main = "Ozone and wind in NewYork city", pch = 20))
model <- lm(Ozone ~ Wind, data = airquality)
abline(model, lwd = 2)
par(mfrow = c(1, 2))
with(airquality, {plot(Wind, Ozone)  plot(Solar.R, Ozone)})
with(airquality, {plot(Wind, Ozone)  ;plot(Solar.R, Ozone)})
par(mfrow = c(1, 3))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and wind")
plot(Solar.R, Ozone, main = "Solar.R and Ozone")
plot(Temp, Ozone, main = "Temp and ozone")
})
mtext("Ozone and weather in NewYork city")
par(mfrow = c(1, 3))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and wind")
plot(Solar.R, Ozone, main = "Solar.R and Ozone")
plot(Temp, Ozone, main = "Temp and ozone")
mtext("Ozone and weather in NewYork city", outer = TRUE)
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and wind")
plot(Solar.R, Ozone, main = "Solar.R and Ozone")
plot(Temp, Ozone, main = "Temp and ozone")
mtext("Ozone and weather in NewYork city", outer = TRUE)
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and wind")
plot(Solar.R, Ozone, main = "Solar.R and Ozone")
plot(Temp, Ozone, main = "Temp and ozone")
mtext("Ozone and weather in NewYork city", outer = TRUE)
})
s
sex <- gl(2, 50)
sex
sex <- gl(2, 50, labels = c("male", "female"))
sex
x <- rnorm(100)
y <- x + rnorm(100)
x
y
plot(x, y)
mfrow(1,1)
mfrow = c(1,1)
plot(x, y)
plot(x, y)
plot(x, y)
par(mfrow = c(1,1))
plot(x, y)
plot(x, y, type = "n")
points(x[sex == "male"], y[sex == "male"], col = "green")
ponits(x[sex == "female", y[sex == "female", col = "blue"]])
ponits(x[sex == "female"], y[sex == "female"], col = "blue")
points(x[sex == "female"], y[sex == "female"], col = "blue")
legend("topright", col <- c("green, blue"), legend = c("male", "female"), pch = 1)
legend("topright", col = c("green, blue"), legend = c("male", "female"), pch = 1)
legend("topright", col = c("green", "blue"), legend = c("male", "female"), pch = 1)
library(datasets)
data(iris)
class(iris)
names(iris)
colnames()
colnames(iris)
summary(iris)
install.packages("cluster")
??cluster
set.seed(24)
iris.sample <- iris[sample(nrow(iris), size = 40), ]
library(cluster)
agnes(iris.sample, diss = FALSE, metric = "euclidean", method = "average")
iris.hc <- agnes(iris.sample, diss = FALSE, metric = "euclidean", method = "average")
plot(iris.hc)
iris.hc <- agnes(iris.sample, diss = FALSE, stand = TRUE, metric = "euclidean", method = "average")
plot(iris.hc)
plot(iris.hc, labels = iris$Species)
plot(iris.hc, labels = iris.sample$Species)
library(cluster)
set.seed(2015)
iris.sample <- iris[sample(x = nrow(iris), size = 40), ]
iris.hc <- agnes(iris.sample[, 1:4], diss = FALSE, stand = TRUE, metric = "euclidean", method = "average")
clgrp3 <- cutree(iris.hc, k = 3)
table(clgrp3, iris.sample$Species)
library (cluster)
set.seed(2015)
iris.sample=iris[sample(nrow(iris),size=40),]
species <- iris.sample$Species
iris.sample$Species <- NULL
iris.hc=agnes(iris.sample,diss=FALSE,metric="euclidean",stand="TRUE",method="average")
clgrp3 = cutree(iris.hc, k = 3)
table(clgrp3, species)
clgrp3
species
setwd("~/Desktop/DataScience/C5-ReproducibleResearch/peerAssignment_1/RepData_PeerAssessment1")
library(dplyr)
library(lubridate)
unzip(zipfile = "activity.zip", overwrite = TRUE)
data <- read.csv(file = "activity.csv", header = TRUE)
data <- tbl_df(data)
View(data)
grop_by_date <- group_by(data, date)
grop_by_date
